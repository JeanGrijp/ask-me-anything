// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO
    questions (
        content,
        user_id,
        like_count,
        is_answered
    )
VALUES (
        $1,
        $2,
        COALESCE($3, 0),
        COALESCE($4, false)
    ) RETURNING id, content, user_id, like_count, is_answered, created_at
`

type CreateQuestionParams struct {
	Content string      `json:"content"`
	UserID  int32       `json:"user_id"`
	Column3 interface{} `json:"column_3"`
	Column4 interface{} `json:"column_4"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.Content,
		arg.UserID,
		arg.Column3,
		arg.Column4,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.LikeCount,
		&i.IsAnswered,
		&i.CreatedAt,
	)
	return i, err
}

const decrementQuestionLikes = `-- name: DecrementQuestionLikes :exec
UPDATE questions
SET
    like_count = like_count - 1
WHERE
    id = $1
    AND like_count > 0
`

func (q *Queries) DecrementQuestionLikes(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, decrementQuestionLikes, id)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one

SELECT id, content, user_id, like_count, is_answered, created_at FROM questions WHERE id = $1 LIMIT 1
`

// Questions queries aligned with Question model
func (q *Queries) GetQuestion(ctx context.Context, id int32) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.LikeCount,
		&i.IsAnswered,
		&i.CreatedAt,
	)
	return i, err
}

const incrementQuestionLikes = `-- name: IncrementQuestionLikes :exec
UPDATE questions SET like_count = like_count + 1 WHERE id = $1
`

func (q *Queries) IncrementQuestionLikes(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, incrementQuestionLikes, id)
	return err
}

const listAnsweredQuestions = `-- name: ListAnsweredQuestions :many
SELECT id, content, user_id, like_count, is_answered, created_at
FROM questions
WHERE
    is_answered = true
ORDER BY created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListAnsweredQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAnsweredQuestions(ctx context.Context, arg ListAnsweredQuestionsParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listAnsweredQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.LikeCount,
			&i.IsAnswered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, content, user_id, like_count, is_answered, created_at
FROM questions
ORDER BY like_count DESC, created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.LikeCount,
			&i.IsAnswered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByUser = `-- name: ListQuestionsByUser :many
SELECT id, content, user_id, like_count, is_answered, created_at FROM questions WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListQuestionsByUser(ctx context.Context, userID int32) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.LikeCount,
			&i.IsAnswered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnansweredQuestions = `-- name: ListUnansweredQuestions :many
SELECT id, content, user_id, like_count, is_answered, created_at
FROM questions
WHERE
    is_answered = false
ORDER BY like_count DESC, created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListUnansweredQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUnansweredQuestions(ctx context.Context, arg ListUnansweredQuestionsParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listUnansweredQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.LikeCount,
			&i.IsAnswered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markQuestionAsAnswered = `-- name: MarkQuestionAsAnswered :exec
UPDATE questions SET is_answered = true WHERE id = $1
`

func (q *Queries) MarkQuestionAsAnswered(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markQuestionAsAnswered, id)
	return err
}

const markQuestionAsUnanswered = `-- name: MarkQuestionAsUnanswered :exec
UPDATE questions SET is_answered = false WHERE id = $1
`

func (q *Queries) MarkQuestionAsUnanswered(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markQuestionAsUnanswered, id)
	return err
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
    content = $2,
    like_count = $3
WHERE
    id = $1 RETURNING id, content, user_id, like_count, is_answered, created_at
`

type UpdateQuestionParams struct {
	ID        int32       `json:"id"`
	Content   string      `json:"content"`
	LikeCount pgtype.Int4 `json:"like_count"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion, arg.ID, arg.Content, arg.LikeCount)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.LikeCount,
		&i.IsAnswered,
		&i.CreatedAt,
	)
	return i, err
}
