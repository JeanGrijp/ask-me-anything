// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: magic_links.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMagicLink = `-- name: CreateMagicLink :one
INSERT INTO
    magic_links (token, email, expires_at)
VALUES ($1, $2, $3) RETURNING id, token, email, expires_at, used, used_at, created_at
`

type CreateMagicLinkParams struct {
	Token     string           `json:"token"`
	Email     string           `json:"email"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateMagicLink(ctx context.Context, arg CreateMagicLinkParams) (MagicLink, error) {
	row := q.db.QueryRow(ctx, createMagicLink, arg.Token, arg.Email, arg.ExpiresAt)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.Used,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredMagicLinks = `-- name: DeleteExpiredMagicLinks :exec
DELETE FROM magic_links WHERE expires_at < NOW() OR used = TRUE
`

func (q *Queries) DeleteExpiredMagicLinks(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredMagicLinks)
	return err
}

const getMagicLink = `-- name: GetMagicLink :one
SELECT id, token, email, expires_at, used, used_at, created_at
FROM magic_links
WHERE
    token = $1
    AND used = FALSE
    AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetMagicLink(ctx context.Context, token string) (MagicLink, error) {
	row := q.db.QueryRow(ctx, getMagicLink, token)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Email,
		&i.ExpiresAt,
		&i.Used,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getMagicLinkByEmail = `-- name: GetMagicLinkByEmail :many
SELECT id, token, email, expires_at, used, used_at, created_at
FROM magic_links
WHERE
    email = $1
    AND used = FALSE
    AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetMagicLinkByEmail(ctx context.Context, email string) ([]MagicLink, error) {
	rows, err := q.db.Query(ctx, getMagicLinkByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MagicLink{}
	for rows.Next() {
		var i MagicLink
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Email,
			&i.ExpiresAt,
			&i.Used,
			&i.UsedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const useMagicLink = `-- name: UseMagicLink :exec
UPDATE magic_links
SET
    used = TRUE,
    used_at = CURRENT_TIMESTAMP
WHERE
    token = $1
`

func (q *Queries) UseMagicLink(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, useMagicLink, token)
	return err
}
