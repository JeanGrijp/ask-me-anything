// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: answers.sql

package database

import (
	"context"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO
    answers (answer, question_id, user_id)
VALUES ($1, $2, $3) RETURNING id, answer, question_id, user_id, created_at
`

type CreateAnswerParams struct {
	Answer     string `json:"answer"`
	QuestionID int32  `json:"question_id"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.queryRow(ctx, q.createAnswerStmt, createAnswer, arg.Answer, arg.QuestionID, arg.UserID)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Answer,
		&i.QuestionID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answers WHERE id = $1
`

func (q *Queries) DeleteAnswer(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAnswerStmt, deleteAnswer, id)
	return err
}

const getAnswer = `-- name: GetAnswer :one

SELECT id, answer, question_id, user_id, created_at FROM answers WHERE id = $1 LIMIT 1
`

// Answers queries aligned with Answer model
func (q *Queries) GetAnswer(ctx context.Context, id int32) (Answer, error) {
	row := q.queryRow(ctx, q.getAnswerStmt, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Answer,
		&i.QuestionID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnswersByQuestion = `-- name: ListAnswersByQuestion :many
SELECT id, answer, question_id, user_id, created_at FROM answers WHERE question_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListAnswersByQuestion(ctx context.Context, questionID int32) ([]Answer, error) {
	rows, err := q.query(ctx, q.listAnswersByQuestionStmt, listAnswersByQuestion, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.Answer,
			&i.QuestionID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnswersByUser = `-- name: ListAnswersByUser :many
SELECT id, answer, question_id, user_id, created_at FROM answers WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListAnswersByUser(ctx context.Context, userID int32) ([]Answer, error) {
	rows, err := q.query(ctx, q.listAnswersByUserStmt, listAnswersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.Answer,
			&i.QuestionID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answers SET answer = $2 WHERE id = $1 RETURNING id, answer, question_id, user_id, created_at
`

type UpdateAnswerParams struct {
	ID     int32  `json:"id"`
	Answer string `json:"answer"`
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.queryRow(ctx, q.updateAnswerStmt, updateAnswer, arg.ID, arg.Answer)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.Answer,
		&i.QuestionID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
