// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package database

import (
	"context"
	"database/sql"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO
    questions (content, user_id, like_count)
VALUES ($1, $2, COALESCE($3, 0)) RETURNING id, content, user_id, created_at, like_count
`

type CreateQuestionParams struct {
	Content sql.NullString `json:"content"`
	UserID  int32          `json:"user_id"`
	Column3 interface{}    `json:"column_3"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.queryRow(ctx, q.createQuestionStmt, createQuestion, arg.Content, arg.UserID, arg.Column3)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.LikeCount,
	)
	return i, err
}

const decrementQuestionLikes = `-- name: DecrementQuestionLikes :exec
UPDATE questions
SET
    like_count = like_count - 1
WHERE
    id = $1
    AND like_count > 0
`

func (q *Queries) DecrementQuestionLikes(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.decrementQuestionLikesStmt, decrementQuestionLikes, id)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteQuestionStmt, deleteQuestion, id)
	return err
}

const getQuestion = `-- name: GetQuestion :one

SELECT id, content, user_id, created_at, like_count FROM questions WHERE id = $1 LIMIT 1
`

// Questions queries aligned with Question model
func (q *Queries) GetQuestion(ctx context.Context, id int32) (Question, error) {
	row := q.queryRow(ctx, q.getQuestionStmt, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.LikeCount,
	)
	return i, err
}

const incrementQuestionLikes = `-- name: IncrementQuestionLikes :exec
UPDATE questions SET like_count = like_count + 1 WHERE id = $1
`

func (q *Queries) IncrementQuestionLikes(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.incrementQuestionLikesStmt, incrementQuestionLikes, id)
	return err
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, content, user_id, created_at, like_count
FROM questions
ORDER BY like_count DESC, created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.query(ctx, q.listQuestionsStmt, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.LikeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByUser = `-- name: ListQuestionsByUser :many
SELECT id, content, user_id, created_at, like_count FROM questions WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListQuestionsByUser(ctx context.Context, userID int32) ([]Question, error) {
	rows, err := q.query(ctx, q.listQuestionsByUserStmt, listQuestionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.LikeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
    content = $2,
    like_count = $3
WHERE
    id = $1 RETURNING id, content, user_id, created_at, like_count
`

type UpdateQuestionParams struct {
	ID        int32          `json:"id"`
	Content   sql.NullString `json:"content"`
	LikeCount sql.NullInt32  `json:"like_count"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.queryRow(ctx, q.updateQuestionStmt, updateQuestion, arg.ID, arg.Content, arg.LikeCount)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.LikeCount,
	)
	return i, err
}
