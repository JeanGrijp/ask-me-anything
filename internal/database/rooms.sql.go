// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package database

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (name, owner_id) VALUES ($1, $2) RETURNING id, name, owner_id, created_at
`

type CreateRoomParams struct {
	Name    string `json:"name"`
	OwnerID int32  `json:"owner_id"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.queryRow(ctx, q.createRoomStmt, createRoom, arg.Name, arg.OwnerID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteRoomStmt, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, name, owner_id, created_at FROM rooms WHERE id = $1 LIMIT 1
`

// Room queries to match Room model
func (q *Queries) GetRoom(ctx context.Context, id int32) (Room, error) {
	row := q.queryRow(ctx, q.getRoomStmt, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, name, owner_id, created_at FROM rooms ORDER BY created_at DESC
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.query(ctx, q.listRoomsStmt, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomsByOwner = `-- name: ListRoomsByOwner :many
SELECT id, name, owner_id, created_at FROM rooms WHERE owner_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListRoomsByOwner(ctx context.Context, ownerID int32) ([]Room, error) {
	rows, err := q.query(ctx, q.listRoomsByOwnerStmt, listRoomsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms SET name = $2 WHERE id = $1 RETURNING id, name, owner_id, created_at
`

type UpdateRoomParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.queryRow(ctx, q.updateRoomStmt, updateRoom, arg.ID, arg.Name)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}
