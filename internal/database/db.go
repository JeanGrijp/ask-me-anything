// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAnswerStmt, err = db.PrepareContext(ctx, createAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnswer: %w", err)
	}
	if q.createMagicLinkStmt, err = db.PrepareContext(ctx, createMagicLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMagicLink: %w", err)
	}
	if q.createQuestionStmt, err = db.PrepareContext(ctx, createQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuestion: %w", err)
	}
	if q.createRoomStmt, err = db.PrepareContext(ctx, createRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoom: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.decrementQuestionLikesStmt, err = db.PrepareContext(ctx, decrementQuestionLikes); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementQuestionLikes: %w", err)
	}
	if q.deleteAnswerStmt, err = db.PrepareContext(ctx, deleteAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnswer: %w", err)
	}
	if q.deleteExpiredMagicLinksStmt, err = db.PrepareContext(ctx, deleteExpiredMagicLinks); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredMagicLinks: %w", err)
	}
	if q.deleteQuestionStmt, err = db.PrepareContext(ctx, deleteQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQuestion: %w", err)
	}
	if q.deleteRoomStmt, err = db.PrepareContext(ctx, deleteRoom); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRoom: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAnswerStmt, err = db.PrepareContext(ctx, getAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnswer: %w", err)
	}
	if q.getMagicLinkStmt, err = db.PrepareContext(ctx, getMagicLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicLink: %w", err)
	}
	if q.getMagicLinkByEmailStmt, err = db.PrepareContext(ctx, getMagicLinkByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetMagicLinkByEmail: %w", err)
	}
	if q.getQuestionStmt, err = db.PrepareContext(ctx, getQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestion: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.incrementQuestionLikesStmt, err = db.PrepareContext(ctx, incrementQuestionLikes); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementQuestionLikes: %w", err)
	}
	if q.listAnswersByQuestionStmt, err = db.PrepareContext(ctx, listAnswersByQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnswersByQuestion: %w", err)
	}
	if q.listAnswersByUserStmt, err = db.PrepareContext(ctx, listAnswersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnswersByUser: %w", err)
	}
	if q.listQuestionsStmt, err = db.PrepareContext(ctx, listQuestions); err != nil {
		return nil, fmt.Errorf("error preparing query ListQuestions: %w", err)
	}
	if q.listQuestionsByUserStmt, err = db.PrepareContext(ctx, listQuestionsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListQuestionsByUser: %w", err)
	}
	if q.listRoomsStmt, err = db.PrepareContext(ctx, listRooms); err != nil {
		return nil, fmt.Errorf("error preparing query ListRooms: %w", err)
	}
	if q.listRoomsByOwnerStmt, err = db.PrepareContext(ctx, listRoomsByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoomsByOwner: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateAnswerStmt, err = db.PrepareContext(ctx, updateAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnswer: %w", err)
	}
	if q.updateQuestionStmt, err = db.PrepareContext(ctx, updateQuestion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQuestion: %w", err)
	}
	if q.updateRoomStmt, err = db.PrepareContext(ctx, updateRoom); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoom: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.useMagicLinkStmt, err = db.PrepareContext(ctx, useMagicLink); err != nil {
		return nil, fmt.Errorf("error preparing query UseMagicLink: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAnswerStmt != nil {
		if cerr := q.createAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnswerStmt: %w", cerr)
		}
	}
	if q.createMagicLinkStmt != nil {
		if cerr := q.createMagicLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMagicLinkStmt: %w", cerr)
		}
	}
	if q.createQuestionStmt != nil {
		if cerr := q.createQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQuestionStmt: %w", cerr)
		}
	}
	if q.createRoomStmt != nil {
		if cerr := q.createRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoomStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.decrementQuestionLikesStmt != nil {
		if cerr := q.decrementQuestionLikesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementQuestionLikesStmt: %w", cerr)
		}
	}
	if q.deleteAnswerStmt != nil {
		if cerr := q.deleteAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnswerStmt: %w", cerr)
		}
	}
	if q.deleteExpiredMagicLinksStmt != nil {
		if cerr := q.deleteExpiredMagicLinksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredMagicLinksStmt: %w", cerr)
		}
	}
	if q.deleteQuestionStmt != nil {
		if cerr := q.deleteQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQuestionStmt: %w", cerr)
		}
	}
	if q.deleteRoomStmt != nil {
		if cerr := q.deleteRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoomStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAnswerStmt != nil {
		if cerr := q.getAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnswerStmt: %w", cerr)
		}
	}
	if q.getMagicLinkStmt != nil {
		if cerr := q.getMagicLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicLinkStmt: %w", cerr)
		}
	}
	if q.getMagicLinkByEmailStmt != nil {
		if cerr := q.getMagicLinkByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMagicLinkByEmailStmt: %w", cerr)
		}
	}
	if q.getQuestionStmt != nil {
		if cerr := q.getQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.incrementQuestionLikesStmt != nil {
		if cerr := q.incrementQuestionLikesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementQuestionLikesStmt: %w", cerr)
		}
	}
	if q.listAnswersByQuestionStmt != nil {
		if cerr := q.listAnswersByQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnswersByQuestionStmt: %w", cerr)
		}
	}
	if q.listAnswersByUserStmt != nil {
		if cerr := q.listAnswersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnswersByUserStmt: %w", cerr)
		}
	}
	if q.listQuestionsStmt != nil {
		if cerr := q.listQuestionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQuestionsStmt: %w", cerr)
		}
	}
	if q.listQuestionsByUserStmt != nil {
		if cerr := q.listQuestionsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQuestionsByUserStmt: %w", cerr)
		}
	}
	if q.listRoomsStmt != nil {
		if cerr := q.listRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsStmt: %w", cerr)
		}
	}
	if q.listRoomsByOwnerStmt != nil {
		if cerr := q.listRoomsByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoomsByOwnerStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateAnswerStmt != nil {
		if cerr := q.updateAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnswerStmt: %w", cerr)
		}
	}
	if q.updateQuestionStmt != nil {
		if cerr := q.updateQuestionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQuestionStmt: %w", cerr)
		}
	}
	if q.updateRoomStmt != nil {
		if cerr := q.updateRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.useMagicLinkStmt != nil {
		if cerr := q.useMagicLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing useMagicLinkStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createAnswerStmt            *sql.Stmt
	createMagicLinkStmt         *sql.Stmt
	createQuestionStmt          *sql.Stmt
	createRoomStmt              *sql.Stmt
	createUserStmt              *sql.Stmt
	decrementQuestionLikesStmt  *sql.Stmt
	deleteAnswerStmt            *sql.Stmt
	deleteExpiredMagicLinksStmt *sql.Stmt
	deleteQuestionStmt          *sql.Stmt
	deleteRoomStmt              *sql.Stmt
	deleteUserStmt              *sql.Stmt
	getAnswerStmt               *sql.Stmt
	getMagicLinkStmt            *sql.Stmt
	getMagicLinkByEmailStmt     *sql.Stmt
	getQuestionStmt             *sql.Stmt
	getRoomStmt                 *sql.Stmt
	getUserStmt                 *sql.Stmt
	getUserByEmailStmt          *sql.Stmt
	incrementQuestionLikesStmt  *sql.Stmt
	listAnswersByQuestionStmt   *sql.Stmt
	listAnswersByUserStmt       *sql.Stmt
	listQuestionsStmt           *sql.Stmt
	listQuestionsByUserStmt     *sql.Stmt
	listRoomsStmt               *sql.Stmt
	listRoomsByOwnerStmt        *sql.Stmt
	listUsersStmt               *sql.Stmt
	updateAnswerStmt            *sql.Stmt
	updateQuestionStmt          *sql.Stmt
	updateRoomStmt              *sql.Stmt
	updateUserStmt              *sql.Stmt
	useMagicLinkStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createAnswerStmt:            q.createAnswerStmt,
		createMagicLinkStmt:         q.createMagicLinkStmt,
		createQuestionStmt:          q.createQuestionStmt,
		createRoomStmt:              q.createRoomStmt,
		createUserStmt:              q.createUserStmt,
		decrementQuestionLikesStmt:  q.decrementQuestionLikesStmt,
		deleteAnswerStmt:            q.deleteAnswerStmt,
		deleteExpiredMagicLinksStmt: q.deleteExpiredMagicLinksStmt,
		deleteQuestionStmt:          q.deleteQuestionStmt,
		deleteRoomStmt:              q.deleteRoomStmt,
		deleteUserStmt:              q.deleteUserStmt,
		getAnswerStmt:               q.getAnswerStmt,
		getMagicLinkStmt:            q.getMagicLinkStmt,
		getMagicLinkByEmailStmt:     q.getMagicLinkByEmailStmt,
		getQuestionStmt:             q.getQuestionStmt,
		getRoomStmt:                 q.getRoomStmt,
		getUserStmt:                 q.getUserStmt,
		getUserByEmailStmt:          q.getUserByEmailStmt,
		incrementQuestionLikesStmt:  q.incrementQuestionLikesStmt,
		listAnswersByQuestionStmt:   q.listAnswersByQuestionStmt,
		listAnswersByUserStmt:       q.listAnswersByUserStmt,
		listQuestionsStmt:           q.listQuestionsStmt,
		listQuestionsByUserStmt:     q.listQuestionsByUserStmt,
		listRoomsStmt:               q.listRoomsStmt,
		listRoomsByOwnerStmt:        q.listRoomsByOwnerStmt,
		listUsersStmt:               q.listUsersStmt,
		updateAnswerStmt:            q.updateAnswerStmt,
		updateQuestionStmt:          q.updateQuestionStmt,
		updateRoomStmt:              q.updateRoomStmt,
		updateUserStmt:              q.updateUserStmt,
		useMagicLinkStmt:            q.useMagicLinkStmt,
	}
}
