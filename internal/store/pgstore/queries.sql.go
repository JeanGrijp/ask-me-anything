// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package pgstore

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUserReaction = `-- name: AddUserReaction :exec
INSERT INTO
    user_reactions (
        "session_id",
        "room_id",
        "message_id",
        "reaction_type"
    )
VALUES ($1, $2, $3, $4) ON CONFLICT (
        session_id,
        message_id,
        reaction_type
    ) DO NOTHING
`

type AddUserReactionParams struct {
	SessionID    uuid.UUID `db:"session_id" json:"session_id"`
	RoomID       uuid.UUID `db:"room_id" json:"room_id"`
	MessageID    uuid.UUID `db:"message_id" json:"message_id"`
	ReactionType string    `db:"reaction_type" json:"reaction_type"`
}

// User Reaction Operations
func (q *Queries) AddUserReaction(ctx context.Context, arg AddUserReactionParams) error {
	_, err := q.db.Exec(ctx, addUserReaction,
		arg.SessionID,
		arg.RoomID,
		arg.MessageID,
		arg.ReactionType,
	)
	return err
}

const cleanExpiredSessions = `-- name: CleanExpiredSessions :exec
DELETE FROM user_sessions WHERE expires_at < NOW()
`

func (q *Queries) CleanExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanExpiredSessions)
	return err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO
    user_sessions (
        "session_token",
        "expires_at",
        "user_agent",
        "ip_address"
    )
VALUES ($1, $2, $3, $4) RETURNING "id",
    "session_token",
    "created_at",
    "expires_at"
`

type CreateUserSessionParams struct {
	SessionToken string           `db:"session_token" json:"session_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	UserAgent    pgtype.Text      `db:"user_agent" json:"user_agent"`
	IpAddress    *netip.Addr      `db:"ip_address" json:"ip_address"`
}

type CreateUserSessionRow struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	SessionToken string           `db:"session_token" json:"session_token"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

// User Session Operations
func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (CreateUserSessionRow, error) {
	row := q.db.QueryRow(ctx, createUserSession,
		arg.SessionToken,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i CreateUserSessionRow
	err := row.Scan(
		&i.ID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteRoomAndMessages = `-- name: DeleteRoomAndMessages :execrows
WITH room_check AS (
    SELECT 1
    FROM room_creators rc
    JOIN user_sessions us ON rc.creator_session_id = us.id
    WHERE rc.room_id = $1
    AND us.session_token = $2
),
deleted_reactions AS (
    DELETE FROM user_reactions 
    WHERE room_id = $1
    AND EXISTS (SELECT 1 FROM room_check)
    RETURNING user_reactions.id
),
deleted_messages AS (
    DELETE FROM messages 
    WHERE room_id = $1
    AND EXISTS (SELECT 1 FROM room_check)
    RETURNING messages.id
)
DELETE FROM rooms
WHERE rooms.id = $1
AND EXISTS (SELECT 1 FROM room_check)
`

type DeleteRoomAndMessagesParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	SessionToken string    `db:"session_token" json:"session_token"`
}

// Room Deletion Operations
func (q *Queries) DeleteRoomAndMessages(ctx context.Context, arg DeleteRoomAndMessagesParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteRoomAndMessages, arg.ID, arg.SessionToken)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM user_sessions WHERE session_token = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteUserSession, sessionToken)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT "id", "room_id", "message", "reaction_count", "answered"
FROM messages
WHERE
    id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
	)
	return i, err
}

const getMessageReactions = `-- name: GetMessageReactions :many
SELECT ur.reaction_type, COUNT(*) as count
FROM user_reactions ur
WHERE
    ur.message_id = $1
GROUP BY
    ur.reaction_type
`

type GetMessageReactionsRow struct {
	ReactionType string `db:"reaction_type" json:"reaction_type"`
	Count        int64  `db:"count" json:"count"`
}

func (q *Queries) GetMessageReactions(ctx context.Context, messageID uuid.UUID) ([]GetMessageReactionsRow, error) {
	rows, err := q.db.Query(ctx, getMessageReactions, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessageReactionsRow
	for rows.Next() {
		var i GetMessageReactionsRow
		if err := rows.Scan(&i.ReactionType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT "id", "theme" FROM rooms WHERE id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const getRoomCreator = `-- name: GetRoomCreator :one
SELECT us.id, us.session_token, us.username
FROM
    room_creators rc
    JOIN user_sessions us ON rc.creator_session_id = us.id
WHERE
    rc.room_id = $1
`

type GetRoomCreatorRow struct {
	ID           uuid.UUID   `db:"id" json:"id"`
	SessionToken string      `db:"session_token" json:"session_token"`
	Username     pgtype.Text `db:"username" json:"username"`
}

func (q *Queries) GetRoomCreator(ctx context.Context, roomID uuid.UUID) (GetRoomCreatorRow, error) {
	row := q.db.QueryRow(ctx, getRoomCreator, roomID)
	var i GetRoomCreatorRow
	err := row.Scan(&i.ID, &i.SessionToken, &i.Username)
	return i, err
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT "id", "room_id", "message", "reaction_count", "answered"
FROM messages
WHERE
    room_id = $1
`

func (q *Queries) GetRoomMessages(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomMessagesWithUserReactions = `-- name: GetRoomMessagesWithUserReactions :many
SELECT
    m.id,
    m.room_id,
    m.message,
    m.reaction_count,
    m.answered,
    CASE
        WHEN ur.id IS NOT NULL THEN true
        ELSE false
    END as user_reacted
FROM messages m
    LEFT JOIN user_reactions ur ON (
        m.id = ur.message_id
        AND ur.session_id = (
            SELECT id
            FROM user_sessions
            WHERE
                session_token = $2
                AND expires_at > NOW()
        )
        AND ur.reaction_type = 'like'
    )
WHERE
    m.room_id = $1
ORDER BY m.id
`

type GetRoomMessagesWithUserReactionsParams struct {
	RoomID       uuid.UUID `db:"room_id" json:"room_id"`
	SessionToken string    `db:"session_token" json:"session_token"`
}

type GetRoomMessagesWithUserReactionsRow struct {
	ID            uuid.UUID `db:"id" json:"id"`
	RoomID        uuid.UUID `db:"room_id" json:"room_id"`
	Message       string    `db:"message" json:"message"`
	ReactionCount int64     `db:"reaction_count" json:"reaction_count"`
	Answered      bool      `db:"answered" json:"answered"`
	UserReacted   bool      `db:"user_reacted" json:"user_reacted"`
}

func (q *Queries) GetRoomMessagesWithUserReactions(ctx context.Context, arg GetRoomMessagesWithUserReactionsParams) ([]GetRoomMessagesWithUserReactionsRow, error) {
	rows, err := q.db.Query(ctx, getRoomMessagesWithUserReactions, arg.RoomID, arg.SessionToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomMessagesWithUserReactionsRow
	for rows.Next() {
		var i GetRoomMessagesWithUserReactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
			&i.UserReacted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRooms = `-- name: GetRooms :many
SELECT "id", "theme" FROM rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReaction = `-- name: GetUserReaction :one
SELECT "id", "reaction_type", "created_at"
FROM user_reactions
WHERE
    session_id = $1
    AND message_id = $2
    AND reaction_type = $3
`

type GetUserReactionParams struct {
	SessionID    uuid.UUID `db:"session_id" json:"session_id"`
	MessageID    uuid.UUID `db:"message_id" json:"message_id"`
	ReactionType string    `db:"reaction_type" json:"reaction_type"`
}

type GetUserReactionRow struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	ReactionType string           `db:"reaction_type" json:"reaction_type"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
}

func (q *Queries) GetUserReaction(ctx context.Context, arg GetUserReactionParams) (GetUserReactionRow, error) {
	row := q.db.QueryRow(ctx, getUserReaction, arg.SessionID, arg.MessageID, arg.ReactionType)
	var i GetUserReactionRow
	err := row.Scan(&i.ID, &i.ReactionType, &i.CreatedAt)
	return i, err
}

const getUserRooms = `-- name: GetUserRooms :many
SELECT r.id, r.theme, rc.created_at
FROM
    rooms r
    JOIN room_creators rc ON r.id = rc.room_id
    JOIN user_sessions us ON rc.creator_session_id = us.id
WHERE
    us.session_token = $1
ORDER BY rc.created_at DESC
`

type GetUserRoomsRow struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	Theme     string           `db:"theme" json:"theme"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

func (q *Queries) GetUserRooms(ctx context.Context, sessionToken string) ([]GetUserRoomsRow, error) {
	rows, err := q.db.Query(ctx, getUserRooms, sessionToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRoomsRow
	for rows.Next() {
		var i GetUserRoomsRow
		if err := rows.Scan(&i.ID, &i.Theme, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSession = `-- name: GetUserSession :one
SELECT "id", "session_token", "created_at", "expires_at", "last_activity", "username", "email"
FROM user_sessions
WHERE
    session_token = $1
    AND expires_at > NOW()
`

type GetUserSessionRow struct {
	ID           uuid.UUID        `db:"id" json:"id"`
	SessionToken string           `db:"session_token" json:"session_token"`
	CreatedAt    pgtype.Timestamp `db:"created_at" json:"created_at"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	LastActivity pgtype.Timestamp `db:"last_activity" json:"last_activity"`
	Username     pgtype.Text      `db:"username" json:"username"`
	Email        pgtype.Text      `db:"email" json:"email"`
}

func (q *Queries) GetUserSession(ctx context.Context, sessionToken string) (GetUserSessionRow, error) {
	row := q.db.QueryRow(ctx, getUserSession, sessionToken)
	var i GetUserSessionRow
	err := row.Scan(
		&i.ID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.LastActivity,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO
    messages ("room_id", "message")
VALUES ($1, $2) RETURNING "id"
`

type InsertMessageParams struct {
	RoomID  uuid.UUID `db:"room_id" json:"room_id"`
	Message string    `db:"message" json:"message"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertMessage, arg.RoomID, arg.Message)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertRoom = `-- name: InsertRoom :one
INSERT INTO rooms ("theme") VALUES ($1) RETURNING "id"
`

func (q *Queries) InsertRoom(ctx context.Context, theme string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertRoom, theme)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const isRoomCreator = `-- name: IsRoomCreator :one
SELECT EXISTS (
        SELECT 1
        FROM
            room_creators rc
            JOIN user_sessions us ON rc.creator_session_id = us.id
        WHERE
            rc.room_id = $1
            AND us.session_token = $2
    ) as is_creator
`

type IsRoomCreatorParams struct {
	RoomID       uuid.UUID `db:"room_id" json:"room_id"`
	SessionToken string    `db:"session_token" json:"session_token"`
}

func (q *Queries) IsRoomCreator(ctx context.Context, arg IsRoomCreatorParams) (bool, error) {
	row := q.db.QueryRow(ctx, isRoomCreator, arg.RoomID, arg.SessionToken)
	var is_creator bool
	err := row.Scan(&is_creator)
	return is_creator, err
}

const markMessageAsAnswered = `-- name: MarkMessageAsAnswered :exec
UPDATE messages SET answered = true WHERE id = $1
`

func (q *Queries) MarkMessageAsAnswered(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, markMessageAsAnswered, id)
	return err
}

const reactToMessage = `-- name: ReactToMessage :one
UPDATE messages
SET
    reaction_count = reaction_count + 1
WHERE
    id = $1 RETURNING reaction_count
`

func (q *Queries) ReactToMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, reactToMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}

const removeReactionFromMessage = `-- name: RemoveReactionFromMessage :one
UPDATE messages
SET
    reaction_count = reaction_count - 1
WHERE
    id = $1 RETURNING reaction_count
`

func (q *Queries) RemoveReactionFromMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, removeReactionFromMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}

const removeUserReaction = `-- name: RemoveUserReaction :exec
DELETE FROM user_reactions
WHERE
    session_id = $1
    AND message_id = $2
    AND reaction_type = $3
`

type RemoveUserReactionParams struct {
	SessionID    uuid.UUID `db:"session_id" json:"session_id"`
	MessageID    uuid.UUID `db:"message_id" json:"message_id"`
	ReactionType string    `db:"reaction_type" json:"reaction_type"`
}

func (q *Queries) RemoveUserReaction(ctx context.Context, arg RemoveUserReactionParams) error {
	_, err := q.db.Exec(ctx, removeUserReaction, arg.SessionID, arg.MessageID, arg.ReactionType)
	return err
}

const setRoomCreator = `-- name: SetRoomCreator :exec
INSERT INTO
    room_creators (
        "room_id",
        "creator_session_id"
    )
VALUES ($1, $2) ON CONFLICT (room_id) DO NOTHING
`

type SetRoomCreatorParams struct {
	RoomID           uuid.UUID `db:"room_id" json:"room_id"`
	CreatorSessionID uuid.UUID `db:"creator_session_id" json:"creator_session_id"`
}

// Room Creator Operations
func (q *Queries) SetRoomCreator(ctx context.Context, arg SetRoomCreatorParams) error {
	_, err := q.db.Exec(ctx, setRoomCreator, arg.RoomID, arg.CreatorSessionID)
	return err
}

const updateSessionActivity = `-- name: UpdateSessionActivity :exec
UPDATE user_sessions
SET
    last_activity = NOW(),
    expires_at = $2
WHERE
    session_token = $1
`

type UpdateSessionActivityParams struct {
	SessionToken string           `db:"session_token" json:"session_token"`
	ExpiresAt    pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

func (q *Queries) UpdateSessionActivity(ctx context.Context, arg UpdateSessionActivityParams) error {
	_, err := q.db.Exec(ctx, updateSessionActivity, arg.SessionToken, arg.ExpiresAt)
	return err
}
